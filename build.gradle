import org.yaml.snakeyaml.Yaml

// import org.yaml.snakeyaml.Yaml 이것만 추가한다고해서 build.gradle 파일에서 사용못함
// 아래 코드가 추가되어야함
buildscript{
    dependencies{
        classpath("org.yaml:snakeyaml:2.2")
    }
}
plugins {
	id 'java'
	// 테스트 커버리지 report plugin
	id 'jacoco'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.google.cloud.tools.jib' version '3.4.0'
	// id "com.ewerk.gradle.plugins.querydsl" version '1.0.10'
}


def yaml = new Yaml()
def applicationYaml = yaml.load(new FileReader(project.rootProject.file('src/main/resources/application.yml')))

group = 'com.gora'
version = applicationYaml['app']['version']
def tomcatPort
if(applicationYaml['server'] != null) {
	if(applicationYaml['server']['port']){
		tomcatPort = applicationYaml['server']['port']
	}else{
		tomcatPort = '8080'
	}
	
} else {
	tomcatPort = '8080'
}

bootJar{
    archivesBaseName = rootProject.name
    archiveFileName = rootProject.name + '-' + version+ '.jar'
    archiveVersion = version
}

java{
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

//	swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

// utils
	implementation 'org.yaml:snakeyaml:2.2'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'org.apache.commons:commons-lang3:3.13.0'
	implementation 'org.modelmapper:modelmapper:3.1.1'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.10.7'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

//	querydsl
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	implementation "com.querydsl:querydsl-apt:5.0.0:jakarta"
	implementation "com.querydsl:querydsl-core:5.0.0"

	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")

//	test
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.testcontainers:testcontainers:1.18.0'
	testImplementation 'org.testcontainers:mysql:1.18.0'
	testImplementation 'org.testcontainers:junit-jupiter:1.18.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

jib{
	from {
		image='openjdk:17-ea-slim-buster'
	}
	to {
		image=rootProject.name
		tags=[version]
	}

	def envProp = new Properties()
	file(".docker/.env").withInputStream { envProp .load(it) }
	
	def envMap = envProp.entrySet().collectEntries { entry ->
    [(entry.key): entry.value]
	}
	def cmdEnvArgs = envProp.collect { key, value ->
    	"-D${key}=${value}"
	}.join(' ')
	
	container {
		creationTime='USE_CURRENT_TIMESTAMP'
		environment=envMap
		jvmFlags = ['-Duser.timezone=GMT']
		ports = [tomcatPort]
		entrypoint=['java', cmdEnvArgs, '-jar', rootProject.name + '-' + version + '.jar']
	}

	extraDirectories {
        paths { 
            path {
                from = file('build/libs') 
            }
        }
    }
}

// querydsl 사용할 경로 지정합니다.
// def querydslDir = "$buildDir/generated/querydsl"

// build시 사용할 sourceSet 추가 설정
// sourceSets {
// 	main.java.srcDir querydslDir
// }

// tasks.withType(JavaCompile) {
// 	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
// }

// querydsl이 compileClassPath를 상속하도록 설정
// configurations {
// 	compileOnly {
// 		extendsFrom annotationProcessor
// 	}
// 	querydsl.extendsFrom compileClasspath
// }

//test report
jacoco {
	toolVersion = "0.8.10"
	// reportsDir = file("$buildDir/jacoco/")
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.required = true
	}
}

jacocoTestCoverageVerification{
	String minimumEnv = System.getenv("COVEREGE_LIMIT_PER");
	BigDecimal minimum;
	if(minimumEnv == null){
		minimum = 0.70
	}else{
		minimum = Double.parseDouble(minimumEnv);
	}
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = []
			excludes = []
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = minimum
			}
		}
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// querydsl {
//   jpa = true
//   querydslSourcesDir = querydslDir
// }

// compileQuerydsl {
//   options.annotationProcessorPath = configurations.querydsl
// }